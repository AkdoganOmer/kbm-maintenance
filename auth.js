// KullanÄ±cÄ± rolleri
const USER_ROLES = {
    ADMIN: 'admin',           // Sistem yÃ¶neticisi
    MANAGER: 'manager',       // Sergi birimi yÃ¶neticisi
    TECHNICIAN: 'technician', // BakÄ±m teknisyeni
    STAFF: 'staff'           // Sergi birimi personeli
};

// Debug fonksiyonu
function debugLog(message, data = null) {
    const timestamp = new Date().toISOString();
    console.log(`[${timestamp}] AUTH: ${message}`);
    if (data) {
        console.log('Data:', data);
    }
}

// Sayfa yetkilendirme kurallarÄ±
const PAGE_RULES = {
    'index.html': [USER_ROLES.ADMIN, USER_ROLES.MANAGER, USER_ROLES.TECHNICIAN, USER_ROLES.STAFF],
    'galleries.html': [USER_ROLES.ADMIN, USER_ROLES.MANAGER, USER_ROLES.TECHNICIAN, USER_ROLES.STAFF],
    'gallery-details.html': [USER_ROLES.ADMIN, USER_ROLES.MANAGER, USER_ROLES.TECHNICIAN, USER_ROLES.STAFF],
    'unit-details.html': [USER_ROLES.ADMIN, USER_ROLES.MANAGER, USER_ROLES.TECHNICIAN, USER_ROLES.STAFF]
};

// Test kullanÄ±cÄ±larÄ±
const TEST_USERS = {
    'admin@kbm.org.tr': {
        password: 'Admin123!',
        role: USER_ROLES.ADMIN,
        displayName: 'Ahmet YÄ±lmaz',
        name: 'Ahmet YÄ±lmaz'
    },
    'manager@kbm.org.tr': {
        password: 'Manager123!',
        role: USER_ROLES.MANAGER,
        displayName: 'Fatma Demir',
        name: 'Fatma Demir'
    },
    'tech@kbm.org.tr': {
        password: 'Tech123!',
        role: USER_ROLES.TECHNICIAN,
        displayName: 'Mehmet Kaya',
        name: 'Mehmet Kaya'
    },
    'staff@kbm.org.tr': {
        password: 'Staff123!',
        role: USER_ROLES.STAFF,
        displayName: 'AyÅŸe Ã–zkan',
        name: 'AyÅŸe Ã–zkan'
    }
};

// Mevcut kullanÄ±cÄ± bilgisi
let currentUser = null;

// Firebase baÅŸlatma kontrolÃ¼
function waitForFirebase() {
    debugLog('Firebase baÅŸlatma kontrolÃ¼ baÅŸladÄ±');
    return new Promise((resolve, reject) => {
        let attempts = 0;
        const maxAttempts = 10;
        
        const checkFirebase = () => {
            if (typeof firebase !== 'undefined' && firebase.apps && firebase.apps.length > 0) {
                debugLog('Firebase baÅŸarÄ±yla baÅŸlatÄ±ldÄ±');
                resolve();
            } else {
                attempts++;
                debugLog(`Firebase baÅŸlatma denemesi: ${attempts}/${maxAttempts}`);
                if (attempts >= maxAttempts) {
                    // Yerel geliÅŸtirme ortamÄ±nda isek, test kullanÄ±cÄ±sÄ±nÄ± otomatik ayarla
                    if (window.location.protocol === 'file:') {
                        debugLog('Yerel geliÅŸtirme ortamÄ± tespit edildi');
                        currentUser = {
                            email: 'admin@kbm.org.tr',
                            role: USER_ROLES.ADMIN,
                            displayName: 'Admin KullanÄ±cÄ± (Yerel)',
                            uid: 'local-dev'
                        };
                        sessionStorage.setItem('currentUser', JSON.stringify(currentUser));
                        debugLog('Test kullanÄ±cÄ±sÄ± ayarlandÄ±', currentUser);
                        resolve();
                        return;
                    }
                    debugLog('Firebase baÅŸlatÄ±lamadÄ±');
                    reject(new Error('Firebase yÃ¼klenemedi'));
                } else {
                    setTimeout(checkFirebase, 500);
                }
            }
        };
        
        checkFirebase();
    });
}

// GiriÅŸ yap
async function login(email, password) {
    try {
        // Yerel geliÅŸtirme ortamÄ± kontrolÃ¼
        if (window.location.protocol === 'file:') {
            const testUser = TEST_USERS[email];
            if (!testUser || testUser.password !== password) {
                throw new Error('HatalÄ± kullanÄ±cÄ± adÄ± veya ÅŸifre.');
            }
            
            currentUser = {
                email: email,
                role: testUser.role,
                displayName: testUser.displayName,
                uid: 'local-dev'
            };
            sessionStorage.setItem('currentUser', JSON.stringify(currentUser));
            window.location.href = 'index.html';
            return currentUser;
        }

        // Firebase ortamÄ± iÃ§in normal giriÅŸ iÅŸlemi
        await waitForFirebase();

        // E-posta formatÄ±nÄ± kontrol et
        if (!email.endsWith('@kbm.org.tr')) {
            throw new Error('Sadece Konya Bilim Merkezi personeli giriÅŸ yapabilir.');
        }

        // Test kullanÄ±cÄ± bilgilerini al
        const testUser = TEST_USERS[email];
        if (!testUser) {
            throw new Error('KullanÄ±cÄ± bulunamadÄ±.');
        }

        // Firebase ile giriÅŸ yap
        const userCredential = await firebase.auth().signInWithEmailAndPassword(email, password);
        const user = userCredential.user;

        // KullanÄ±cÄ± bilgilerini sakla
        currentUser = {
            email: email,
            role: testUser.role,
            displayName: testUser.displayName,
            uid: user.uid
        };
        sessionStorage.setItem('currentUser', JSON.stringify(currentUser));

        // Ana sayfaya yÃ¶nlendir
        window.location.href = 'index.html';

        return currentUser;
    } catch (error) {
        console.error('GiriÅŸ hatasÄ±:', error);
        
        if (error.code) {
            // Firebase hata mesajlarÄ±nÄ± TÃ¼rkÃ§eleÅŸtir
            if (error.code === 'auth/wrong-password') {
                throw new Error('HatalÄ± ÅŸifre.');
            } else if (error.code === 'auth/user-not-found') {
                throw new Error('KullanÄ±cÄ± bulunamadÄ±.');
            } else if (error.code === 'auth/invalid-email') {
                throw new Error('GeÃ§ersiz e-posta adresi.');
            } else if (error.code === 'auth/user-disabled') {
                throw new Error('Bu hesap devre dÄ±ÅŸÄ± bÄ±rakÄ±lmÄ±ÅŸ.');
            } else if (error.code === 'auth/too-many-requests') {
                throw new Error('Ã‡ok fazla baÅŸarÄ±sÄ±z giriÅŸ denemesi. LÃ¼tfen daha sonra tekrar deneyin.');
            } else if (error.code === 'auth/network-request-failed') {
                throw new Error('AÄŸ baÄŸlantÄ±sÄ± hatasÄ±. Ä°nternet baÄŸlantÄ±nÄ±zÄ± kontrol edin.');
            } else if (error.code === 'auth/invalid-api-key') {
                throw new Error('Firebase yapÄ±landÄ±rmasÄ± hatalÄ±. LÃ¼tfen yÃ¶neticinize bildirin.');
            }
        }
        throw error;
    }
}

// Ã‡Ä±kÄ±ÅŸ yap
async function logout() {
    try {
        await firebase.auth().signOut();
        sessionStorage.clear();
        window.location.href = 'login.html';
    } catch (error) {
        console.error('Ã‡Ä±kÄ±ÅŸ yapÄ±lÄ±rken hata:', error);
        showError('Ã‡Ä±kÄ±ÅŸ yapÄ±lÄ±rken bir hata oluÅŸtu.');
    }
}

// KullanÄ±cÄ± rolÃ¼nÃ¼ kontrol et
function getUserRole() {
    return currentUser ? currentUser.role : null;
}

// Admin kontrolÃ¼
function isAdmin() {
    return currentUser && currentUser.role === USER_ROLES.ADMIN;
}

// YÃ¶netici kontrolÃ¼
function isManager() {
    return currentUser && (currentUser.role === USER_ROLES.MANAGER || currentUser.role === USER_ROLES.ADMIN);
}

// Teknisyen kontrolÃ¼
function isTechnician() {
    return currentUser && (currentUser.role === USER_ROLES.TECHNICIAN || currentUser.role === USER_ROLES.ADMIN);
}

// Admin UI elementlerini gÃ¶ster/gizle
function updateAdminUI() {
    debugLog('updateAdminUI Ã§aÄŸrÄ±ldÄ±, currentUser:', currentUser);
    
    const adminElements = document.querySelectorAll('.admin-only');
    const managerElements = document.querySelectorAll('.manager-only');
    const technicianElements = document.querySelectorAll('.technician-only');

    const isAdminUser = isAdmin();
    const isManagerUser = isManager();
    const isTechnicianUser = isTechnician();

    debugLog('KullanÄ±cÄ± yetkileri:', {
        isAdmin: isAdminUser,
        isManager: isManagerUser,
        isTechnician: isTechnicianUser
    });

    adminElements.forEach(element => {
        const shouldShow = isAdminUser;
        element.style.display = shouldShow ? '' : 'none';
        debugLog(`Admin element ${element.className}: ${shouldShow ? 'gÃ¶steriliyor' : 'gizleniyor'}`);
    });

    managerElements.forEach(element => {
        const shouldShow = isManagerUser;
        element.style.display = shouldShow ? '' : 'none';
    });

    technicianElements.forEach(element => {
        const shouldShow = isTechnicianUser;
        element.style.display = shouldShow ? '' : 'none';
    });
}

// KullanÄ±cÄ± bilgilerini gÃ¼ncelle
function updateUserInfo() {
    const userInfoElement = document.getElementById('userInfo');
    if (!userInfoElement || !currentUser) return;

    let roleIcon = '';
    switch (currentUser.role) {
        case USER_ROLES.ADMIN:
            roleIcon = 'ðŸ‘‘'; // Admin
            break;
        case USER_ROLES.MANAGER:
            roleIcon = 'ðŸ”°'; // YÃ¶netici
            break;
        case USER_ROLES.TECHNICIAN:
            roleIcon = 'ðŸ”§'; // Teknisyen
            break;
        case USER_ROLES.STAFF:
            roleIcon = 'ðŸ‘¤'; // Personel
            break;
    }

    userInfoElement.textContent = `${roleIcon} ${currentUser.displayName}`;
}

// Oturum durumunu kontrol et
function checkAuth() {
    const userData = sessionStorage.getItem('currentUser');
    if (userData) {
        currentUser = JSON.parse(userData);
        debugLog('KullanÄ±cÄ± oturumu yÃ¼klendi:', currentUser);
        return true;
    }
    
    // Session storage'da yoksa, diÄŸer bilgilerden oluÅŸtur
    const userId = sessionStorage.getItem('userId');
    const userEmail = sessionStorage.getItem('userEmail');
    const userRole = sessionStorage.getItem('userRole');
    const userName = sessionStorage.getItem('userName');
    
    if (userId && userEmail && userRole) {
        currentUser = {
            uid: userId,
            email: userEmail,
            role: userRole,
            displayName: userName || userEmail.split('@')[0]
        };
        sessionStorage.setItem('currentUser', JSON.stringify(currentUser));
        debugLog('KullanÄ±cÄ± bilgileri yeniden oluÅŸturuldu:', currentUser);
        return true;
    }
    
    debugLog('KullanÄ±cÄ± oturumu bulunamadÄ±');
    return false;
}

// Debug fonksiyonu
function authDebug(message, data = null) {
    if (window.debug) {
        const prefix = '[Auth Debug]';
        if (data) {
            window.debug(prefix + ' ' + message, data);
        } else {
            window.debug(prefix + ' ' + message);
        }
    }
}

// Mevcut sayfayÄ± kontrol et
function getCurrentPage() {
    const path = window.location.pathname;
    const pageName = path.substring(path.lastIndexOf('/') + 1) || 'index.html';
    const isLoginPage = pageName === 'login.html';
    return { path: pageName, isLoginPage };
}

// KullanÄ±cÄ± yetkisini kontrol et
function checkUserPermission(userRole, pagePath) {
    if (!PAGE_RULES[pagePath]) return true;
    return PAGE_RULES[pagePath].includes(userRole);
}

// UI'Ä± gÃ¼ncelle
function updateUI(user) {
    const userNameElement = document.getElementById('userName');
    const userRoleElement = document.getElementById('userRole');
    const logoutButton = document.getElementById('logoutButton');
    
    if (userNameElement && user) {
        userNameElement.textContent = user.displayName || user.email;
    }
    
    if (userRoleElement && user && user.role) {
        let roleText = '';
        switch (user.role) {
            case USER_ROLES.ADMIN:
                roleText = 'YÃ¶netici';
                break;
            case USER_ROLES.MANAGER:
                roleText = 'Sorumlu';
                break;
            case USER_ROLES.TECHNICIAN:
                roleText = 'Teknisyen';
                break;
            case USER_ROLES.STAFF:
                roleText = 'Personel';
                break;
            default:
                roleText = user.role;
        }
        userRoleElement.textContent = roleText;
    }
    
    if (logoutButton) {
        logoutButton.addEventListener('click', () => {
            sessionStorage.removeItem('currentUser');
            firebase.auth().signOut().then(() => {
                window.location.href = 'login.html';
            }).catch((error) => {
                console.error('Ã‡Ä±kÄ±ÅŸ yapÄ±lÄ±rken hata:', error);
            });
        });
    }
}

// Auth durumunu dinle
let authInitialized = false;

document.addEventListener('DOMContentLoaded', () => {
    authDebug('Auth durumu dinleyicisi baÅŸlatÄ±lÄ±yor...');
    
    // Firebase'in yÃ¼klenmesini bekle
    const checkFirebase = setInterval(() => {
        if (typeof firebase !== 'undefined' && firebase.apps.length > 0) {
            clearInterval(checkFirebase);
            
            firebase.auth().onAuthStateChanged(async (user) => {
                const currentPage = getCurrentPage();
                
                if (user) {
                    authDebug('Auth durumu deÄŸiÅŸti:', user.email);
                    authDebug('Mevcut sayfa:', currentPage);
                    
                    // Sadece login sayfasÄ±nda deÄŸilse kullanÄ±cÄ± bilgilerini gÃ¼ncelle
                    if (!currentPage.isLoginPage) {
                        try {
                            // KullanÄ±cÄ± bilgilerini Firestore'dan al
                            const userDoc = await window.db.collection('users').doc(user.uid).get();
                            
                            if (userDoc.exists) {
                                const userData = userDoc.data();
                                
                                // Session storage'a kullanÄ±cÄ± bilgilerini kaydet
                                sessionStorage.setItem('userId', user.uid);
                                sessionStorage.setItem('userEmail', user.email);
                                sessionStorage.setItem('userRole', userData.role || 'staff');
                                sessionStorage.setItem('userName', userData.name || user.email.split('@')[0]);

                                // KullanÄ±cÄ± bilgilerini gÃ¶ster
                                const userInfoElement = document.getElementById('userInfo');
                                if (userInfoElement) {
                                    userInfoElement.innerHTML = `
                                        <span class="me-2"><i class="bi bi-person-circle"></i> ${userData.name || user.email.split('@')[0]}</span>
                                    `;
                                }
                            } else {
                                // KullanÄ±cÄ± dokÃ¼manÄ± yoksa oluÅŸtur
                                const defaultUserData = {
                                    email: user.email,
                                    name: user.email.split('@')[0],
                                    role: 'staff',
                                    createdAt: new Date().toISOString()
                                };
                                
                                await window.db.collection('users').doc(user.uid).set(defaultUserData);
                                
                                // Session storage'a varsayÄ±lan bilgileri kaydet
                                sessionStorage.setItem('userId', user.uid);
                                sessionStorage.setItem('userEmail', user.email);
                                sessionStorage.setItem('userRole', 'staff');
                                sessionStorage.setItem('userName', user.email.split('@')[0]);
                            }
                        } catch (error) {
                            authDebug('KullanÄ±cÄ± bilgileri alÄ±nÄ±rken hata:', error);
                            // Hata durumunda varsayÄ±lan deÄŸerleri kullan
                            sessionStorage.setItem('userId', user.uid);
                            sessionStorage.setItem('userEmail', user.email);
                            sessionStorage.setItem('userRole', 'staff');
                            sessionStorage.setItem('userName', user.email.split('@')[0]);
                        }
                    }
                } else {
                    // KullanÄ±cÄ± oturum aÃ§mamÄ±ÅŸsa login sayfasÄ±na yÃ¶nlendir
                    const currentPage = getCurrentPage();
                    if (!currentPage.isLoginPage) {
                        window.location.href = 'login.html';
                    }
                }
                
                // Auth baÅŸlatÄ±ldÄ±
                authInitialized = true;
            });
        }
    }, 100);
    
    // 10 saniye sonra timeout
    setTimeout(() => {
        clearInterval(checkFirebase);
        if (!authInitialized) {
            authDebug('Firebase yÃ¼klenirken zaman aÅŸÄ±mÄ±');
            if (!getCurrentPage().isLoginPage) {
                window.location.href = 'login.html';
            }
        }
    }, 10000);
});

// Sayfa yetki kontrolÃ¼
function checkPagePermission() {
    const userRole = sessionStorage.getItem('userRole');
    const currentPath = window.location.pathname.split('/').pop() || 'index.html';

    window.debug('[Auth] Sayfa yetki kontrolÃ¼:', { userRole, currentPath });

    // Yetki gerektirmeyen sayfalar
    const publicPages = ['login.html'];
    if (publicPages.includes(currentPath)) {
        window.debug('[Auth] Yetki gerektirmeyen sayfa');
        return true;
    }

    // KullanÄ±cÄ± giriÅŸi yapÄ±lmamÄ±ÅŸsa
    if (!userRole) {
        window.debug('[Auth] KullanÄ±cÄ± giriÅŸi yapÄ±lmamÄ±ÅŸ');
        window.location.href = 'login.html';
        return false;
    }

    // Sayfa bazlÄ± yetki kontrolÃ¼
    if (!PAGE_RULES[currentPath]) {
        window.debug('[Auth] Sayfa kuralÄ± bulunamadÄ±, eriÅŸime izin veriliyor');
        return true;
    }

    // Sayfaya eriÅŸim yetkisi kontrolÃ¼
    if (!PAGE_RULES[currentPath].includes(userRole)) {
        window.debug('[Auth] Sayfa yetkisi reddedildi:', { userRole, requiredRoles: PAGE_RULES[currentPath] });
        showError('Bu sayfaya eriÅŸim yetkiniz yok!');
        window.location.href = 'index.html';
        return false;
    }

    window.debug('[Auth] Sayfa yetkisi onaylandÄ±');
    return true;
}

// Oturum durumunu kontrol et
firebase.auth().onAuthStateChanged(async (user) => {
    window.debug('[Auth] Oturum durumu deÄŸiÅŸti:', user ? user.email : 'oturum kapalÄ±');

    if (!user) {
        // KullanÄ±cÄ± oturum aÃ§mamÄ±ÅŸsa login sayfasÄ±na yÃ¶nlendir
        const currentPath = window.location.pathname.split('/').pop();
        if (currentPath !== 'login.html') {
            window.location.href = 'login.html';
        }
        return;
    }

    try {
        // KullanÄ±cÄ± bilgilerini Firestore'dan al
        const userDoc = await db.collection('users').doc(user.uid).get();
        
        if (userDoc.exists) {
            const userData = userDoc.data();
            
            // Session storage'a kullanÄ±cÄ± bilgilerini kaydet
            sessionStorage.setItem('userId', user.uid);
            sessionStorage.setItem('userEmail', user.email);
            sessionStorage.setItem('userRole', userData.role || 'staff');
            sessionStorage.setItem('userName', userData.name || user.email.split('@')[0]);

            // KullanÄ±cÄ± bilgilerini gÃ¶ster
            const userInfoElement = document.getElementById('userInfo');
            if (userInfoElement) {
                userInfoElement.innerHTML = `
                    <span class="me-2">${userData.name || user.email.split('@')[0]}</span>
                    <span class="badge bg-primary">${userData.role || 'staff'}</span>
                `;
            }

            // Sayfa yetkisini kontrol et
            if (!checkPagePermission()) {
                window.debug('[Auth] Sayfa yetkisi reddedildi');
                return;
            }

            window.debug('[Auth] KullanÄ±cÄ± bilgileri gÃ¼ncellendi:', {
                role: userData.role,
                name: userData.name
            });

        } else {
            // KullanÄ±cÄ± dokÃ¼manÄ± yoksa oluÅŸtur
            const defaultUserData = {
                email: user.email,
                name: user.email.split('@')[0],
                role: 'staff',
                createdAt: new Date().toISOString()
            };
            
            await db.collection('users').doc(user.uid).set(defaultUserData);
            
            // Session storage'a varsayÄ±lan bilgileri kaydet
            sessionStorage.setItem('userId', user.uid);
            sessionStorage.setItem('userEmail', user.email);
            sessionStorage.setItem('userRole', 'staff');
            sessionStorage.setItem('userName', user.email.split('@')[0]);

            // Sayfa yetkisini kontrol et
            if (!checkPagePermission()) {
                window.debug('[Auth] Sayfa yetkisi reddedildi (yeni kullanÄ±cÄ±)');
                return;
            }

            window.debug('[Auth] Yeni kullanÄ±cÄ± oluÅŸturuldu:', defaultUserData);
        }
    } catch (error) {
        console.error('KullanÄ±cÄ± bilgileri alÄ±nÄ±rken hata:', error);
        window.debug('[Auth] KullanÄ±cÄ± bilgileri alÄ±nÄ±rken hata:', error);

        // Hata durumunda varsayÄ±lan deÄŸerleri kullan
        sessionStorage.setItem('userId', user.uid);
        sessionStorage.setItem('userEmail', user.email);
        sessionStorage.setItem('userRole', 'staff');
        sessionStorage.setItem('userName', user.email.split('@')[0]);

        // Sayfa yetkisini kontrol et
        if (!checkPagePermission()) {
            window.debug('[Auth] Sayfa yetkisi reddedildi (hata durumu)');
            return;
        }
    }
});

// Hata mesajÄ± gÃ¶ster
function showError(message) {
    const alertDiv = document.createElement('div');
    alertDiv.className = 'alert alert-danger alert-dismissible fade show';
    alertDiv.setAttribute('role', 'alert');
    alertDiv.innerHTML = `
        ${message}
        <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
    `;
    document.querySelector('.container').prepend(alertDiv);
} 